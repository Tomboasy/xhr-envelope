{"version":3,"names":[],"mappings":"","sources":["envelope.js"],"sourcesContent":["(function(global, factory) {\n\ttypeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory() :\n\ttypeof define === \"function\" && define.amd ? define(factory) :\n\t(global.envelope = factory());\n} (this, function() {\n\n\t\"use strict\";\n\n\tif(typeof require !== \"undefined\") {\n\t\tif(typeof utilities === \"undefined\") {\n\t\t\tglobal.utilities = require(\"extra-utilities\");\n\t\t}\n\t}\n\n\tvar envelope = { };\n\n\tvar validMethods = Object.freeze([\"HEAD\", \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\n\n\tvar defaultOptions = {\n\t\tbaseUrl: null,\n\t\tauthorization: null,\n\t\ttimeout: 30000\n\t};\n\n\tenvelope.hasBaseUrl = function() {\n\t\treturn utilities.isNonEmptyString(defaultOptions.baseUrl);\n\t};\n\n\tenvelope.getBaseUrl = function() {\n\t\treturn defaultOptions.baseUrl;\n\t};\n\n\tenvelope.setBaseUrl = function(url) {\n\t\tif(utilities.isEmptyString(url)) {\n\t\t\treturn;\n\t\t}\n\n\t\tdefaultOptions.baseUrl = url;\n\t};\n\n\tenvelope.clearBaseUrl = function() {\n\t\tdefaultOptions.baseUrl = null;\n\t};\n\n\tenvelope.hasAuthorization = function() {\n\t\treturn utilities.isNonEmptyString(defaultOptions.authorization);\n\t};\n\n\tenvelope.getAuthorization = function() {\n\t\treturn defaultOptions.authorization;\n\t};\n\n\tenvelope.setAuthorizationToken = function(token) {\n\t\tif(utilities.isEmptyString(token)) { return; }\n\n\t\tdefaultOptions.authorization = token;\n\t};\n\n\tenvelope.setBasicAuthorization = function(userName, password) {\n\t\tif(utilities.isEmptyString(userName) || utilities.isEmptyString(password)) { return; }\n\n\t\tdefaultOptions.authorization = \"Basic \" + btoa(userName + \":\" + password);\n\t};\n\n\tenvelope.clearAuthorization = function() {\n\t\tdefaultOptions.authorization = null;\n\t};\n\n\tenvelope.hasTimeout = function() {\n\t\treturn utilities.isValid(defaultOptions.timeout);\n\t};\n\n\tenvelope.getTimeout = function() {\n\t\treturn defaultOptions.timeout;\n\t};\n\n\tenvelope.setTimeout = function(timeout) {\n\t\tvar formattedTimeout = utilities.parseInteger(timeout);\n\n\t\tif(utilities.isInvalidNumber(formattedTimeout) || formattedTimeout < 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tdefaultOptions.timeout = formattedTimeout;\n\t};\n\n\tenvelope.clearTimeout = function() {\n\t\tdefaultOptions.timeout = null;\n\t};\n\n\tenvelope.request = function(method, path, data, query, options, callback) {\n\t\tif(utilities.isFunction(data)) {\n\t\t\tcallback = data;\n\t\t\toptions = null;\n\t\t\tquery = null;\n\t\t\tdata = null;\n\t\t}\n\t\telse if(utilities.isFunction(query)) {\n\t\t\tcallback = query;\n\t\t\toptions = null;\n\t\t\tquery = null;\n\t\t}\n\t\telse if(utilities.isFunction(options)) {\n\t\t\tcallback = options;\n\t\t\toptions = null;\n\t\t}\n\n\t\tif(!utilities.isFunction(callback)) {\n\t\t\tthrow new Error(\"Missing or invalid callback function!\");\n\t\t}\n\n\t\tif(utilities.isEmptyString(method)) {\n\t\t\treturn callback(new Error(\"Missing or invalid method type.\"));\n\t\t}\n\n\t\tvar formattedMethod = method.toUpperCase().trim();\n\t\tvar isUpload = formattedMethod === \"UPLOAD\";\n\n\t\tif(isUpload) {\n\t\t\tformattedMethod = \"POST\";\n\t\t}\n\n\t\tvar validMethod = false;\n\n\t\tfor(var i = 0; i < validMethods.length; i++) {\n\t\t\tif(formattedMethod === validMethods[i]) {\n\t\t\t\tvalidMethod = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(!validMethod) {\n\t\t\treturn callback(new Error(\"Invalid method type: \\\"\" + formattedMethod + \"\\\" - expected one of: \" + validMethods.join(\", \") + \".\"));\n\t\t}\n\n\t\tvar hasBody = formattedMethod === \"POST\" ||\n\t\t\t\t\t  formattedMethod === \"PUT\" ||\n\t\t\t\t\t  formattedMethod === \"PATCH\";\n\n\t\tif(utilities.isValid(data) && !hasBody) {\n\t\t\toptions = query;\n\t\t\tquery = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\tvar newOptions = utilities.isObject(options) ? utilities.clone(options) : { };\n\t\tnewOptions.method = formattedMethod;\n\n\t\tif(newOptions.timeout !== null && !Number.isInteger(newOptions.timeout)) {\n\t\t\tnewOptions.timeout = defaultOptions.timeout;\n\t\t}\n\n\t\tif(utilities.isInvalid(newOptions.timeout)) {\n\t\t\tdelete newOptions.timeout;\n\t\t}\n\n\t\tif(utilities.isNonEmptyString(newOptions.baseUrl)) {\n\t\t\tnewOptions.url = newOptions.baseUrl;\n\t\t}\n\t\telse {\n\t\t\tnewOptions.url = (utilities.isNonEmptyString(defaultOptions.baseUrl) ? defaultOptions.baseUrl : \"\");\n\t\t}\n\n\t\tnewOptions.url += utilities.prependSlash(path);\n\t\tnewOptions.url += utilities.createQueryString(query, true);\n\n\t\tif(hasBody && utilities.isValid(data)) {\n\t\t\tnewOptions.data = utilities.isObject(data) ? JSON.stringify(data) : data;\n\t\t}\n\n\t\tif(!utilities.isObject(newOptions.headers)) {\n\t\t\tnewOptions.headers = { };\n\t\t}\n\n\t\tif(isUpload) {\n\t\t\tnewOptions.headers[\"Content-Type\"] = undefined;\n\t\t}\n\t\telse if(utilities.isEmptyString(newOptions.headers[\"Content-Type\"])) {\n\t\t\tnewOptions.headers[\"Content-Type\"] = \"application/json\";\n\t\t}\n\n\t\tif(utilities.isEmptyString(newOptions.headers.Accepts)) {\n\t\t\tnewOptions.headers.Accepts = \"application/json\";\n\t\t}\n\n\t\tif(utilities.isValid(newOptions.authorization)) {\n\t\t\tif(utilities.isNonEmptyString(newOptions.authorization)) {\n\t\t\t\tif(utilities.isNonEmptyString(newOptions.headers.Authorization)) {\n\t\t\t\t\tconsole.error(\"Authorization specified in header data is being overridden by authorization at root level of options.\");\n\t\t\t\t}\n\n\t\t\t\tnewOptions.headers.Authorization = newOptions.authorization;\n\t\t\t}\n\n\t\t\tdelete newOptions.authorization;\n\t\t}\n\n\t\tif(utilities.isEmptyString(newOptions.headers.Authorization)) {\n\t\t\tif(utilities.isNonEmptyString(defaultOptions.authorization)) {\n\t\t\t\tnewOptions.headers.Authorization = defaultOptions.authorization;\n\t\t\t}\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\n\t\trequest.open(newOptions.method, newOptions.url, true);\n\n\t\tif(utilities.isObjectStrict(newOptions.headers)) {\n\t\t\tvar headerName = null;\n\t\t\tvar headerNames = Object.keys(newOptions.headers);\n\n\t\t\tfor(var i = 0; i < headerNames.length; i++) {\n\t\t\t\theaderName = headerNames[i];\n\n\t\t\t\trequest.setRequestHeader(headerName, newOptions.headers[headerName]);\n\t\t\t}\n\t\t}\n\n\t\trequest.setRequestHeader(\"Content-Type\", \"application/json\");\n\n\t\trequest.timeout = newOptions.timeout;\n\n\t\trequest.addEventListener(\"load\", function(event) {\n\t\t\tif(typeof request.responseText === \"string\" && request.responseText.length !== 0) {\n\t\t\t\tvar responseJSON = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tresponseJSON = JSON.parse(request.responseText);\n\t\t\t\t}\n\t\t\t\tcatch(error) {\n\t\t\t\t\terror.message = \"Invalid response data: \" + error.message;\n\t\t\t\t\terror.status = request.status;\n\n\t\t\t\t\treturn callback(error, null, request.status);\n\t\t\t\t}\n\n\t\t\t\tif(utilities.isObjectStrict(responseJSON) && utilities.isObjectStrict(responseJSON.error)) {\n\t\t\t\t\tvar message = responseJSON.error.message;\n\n\t\t\t\t\tif(utilities.isEmptyString(message)) {\n\t\t\t\t\t\tmessage = \"Unknown error.\";\n\t\t\t\t\t}\n\n\t\t\t\t\tvar error = new Error(message);\n\n\t\t\t\t\tvar attributeName = null;\n\t\t\t\t\tvar attributeNames = Object.getOwnPropertyNames(responseJSON.error);\n\n\t\t\t\t\tfor(var i = 0; i < attributeNames.length; i++) {\n\t\t\t\t\t\tattributeName = attributeNames[i];\n\n\t\t\t\t\t\terror[attributeName] = responseJSON.error[attributeName];\n\t\t\t\t\t}\n\n\t\t\t\t\terror.status = request.status;\n\n\t\t\t\t\treturn callback(error, null, request.status);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn callback(null, responseJSON, request.status);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn callback(null, null, request.status);\n\t\t\t}\n\t\t});\n\n\t\trequest.addEventListener(\"error\", function(event) {\n\t\t\treturn callback(utilities.createError(\"Connection failed!\", 0), null, 0);\n\t\t});\n\n\t\tif(utilities.isObject(newOptions)) {\n\t\t\trequest.send(newOptions.data);\n\t\t}\n\t\telse {\n\t\t\trequest.send();\n\t\t}\n\t};\n\n\tenvelope.head = function(path, data, query, options, callback) {\n\t\treturn envelope.request(\"HEAD\", path, data, query, options, callback);\n\t};\n\n\tenvelope.get = function(path, data, query, options, callback) {\n\t\treturn envelope.request(\"GET\", path, data, query, options, callback);\n\t};\n\n\tenvelope.post = function(path, data, query, options, callback) {\n\t\treturn envelope.request(\"POST\", path, data, query, options, callback);\n\t};\n\n\tenvelope.put = function(path, data, query, options, callback) {\n\t\treturn envelope.request(\"PUT\", path, data, query, options, callback);\n\t};\n\n\tenvelope.patch = function(path, data, query, options, callback) {\n\t\treturn envelope.request(\"PATCH\", path, data, query, options, callback);\n\t};\n\n\tenvelope.delete = function(path, data, query, options, callback) {\n\t\treturn envelope.request(\"DELETE\", path, data, query, options, callback);\n\t};\n\n\tenvelope.upload = function(path, data, query, options, file, callback) {\n\t\tvar fileDescriptor = new FormData();\n\n\t\tif(utilities.isValid(file)) {\n\t\t\tfileDescriptor.append(\"file\", file);\n\t\t}\n\n\t\tif(utilities.isObjectStrict(data)) {\n\t\t\tfor(var attribute in data) {\n\t\t\t\tif(attribute === \"file\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfileDescriptor.append(attribute, data[attribute]);\n\t\t\t}\n\t\t}\n\n\t\treturn envelope.request(\"UPLOAD\", path, fileDescriptor, query, options, callback);\n\t};\n\n\treturn envelope;\n\n}));\n"],"file":"envelope.js"}